{"meta":{"title":"Mr.xie","subtitle":"","description":"","author":"Mr.xie","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-04-26T17:53:01.706Z","updated":"2020-04-26T17:53:01.706Z","comments":true,"path":"2020/04/27/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"数据库操作","slug":"数据库的操作","date":"2020-03-08T08:24:37.304Z","updated":"2020-03-08T08:24:37.304Z","comments":true,"path":"2020/03/08/数据库的操作/","link":"","permalink":"http://yoursite.com/2020/03/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C/","excerpt":"","text":"//***DDL数据库的怎删改查***#数据库的创建 CREATE DATABASE 数据库名; CREATE DATABASE IF NOT EXISTS 数据库名; CREATE DATABASE 数据库名 CHARACTER SET 字符集类型; #数据库的查询 SHOW DATABASES; SHOW CREATE DATABASE 数据库名; #数据库的修改 ALTER DATABASE 数据库名 CHARACTER SET 字符集类型 #数据库的删除 DROP DATABASE 数据库名; DROP DATABASE IF EXISTS 数据库名; #操作数据库 USE 数据库名； SELECT DATABASE(); //***DDL表的增删改查***#查询数据库中所有的表 SHOW TABLES; #查询表的字符集 SHOW CREATE TABLE 表名; #查询表中的结构 DESC newstu; #创建一个表 CREATE TABLE NEWSTU( 列名1 类型1， 列名2 类型2， 列名n 类型n); #删除一个表 DROP TABLE 表名; DROP TABLE IF EXISTS n表名; #修改一张表 ALTER TABLE oldtable RENAME TO newtable; ALTER TABLE 表名 CHARACTER SET 字符集; ALTER TABLE 表名 ADD 列名 类型; ALTER TABLE 表名 DROP 列名 类型; ALTER TABLE 表名 CHANGE 列名 新列名 类型; ALTER TABLE 表名 MODIFY 列名 新类型; //****DDL数据的增删改操作*****#在表中插入数据 INSERT INTO 表名(newid,NAME,age,score,brithday) VALUES(1,”jell”,19,100.0,”2000-09-08”); #全员插入不需要写列名 INSERT INTO 表名 VALUES(1,”d”,19,88.0,”2000-09-08”); INSERT INTO 表名 VALUES(2,”a”,72,3.0,”2000-09-08”); INSERT INTO 表名 VALUES(3,”w”,15,2.0,”2000-09-08”); INSERT INTO 表名 VALUES(4,”h”,17,51.0,”2000-09-08”); INSERT INTO 表名 VALUES(5,”x”,13,84.0,”2000-09-08”); INSERT INTO 表名 VALUES(6,”t”,69,76.0,”2000-09-08”); INSERT INTO 表名 VALUES(7,”e”,18,98.0,”2000-09-08”); INSERT INTO 表名 VALUES(8,”i”,39,100.0,”2000-09-08”); #删除某个指定的数据 DELETE FROM 表名 WHERE 键=值; #删除表中所有数据 DELETE FROM 表名; #查询表中的列 DESC 表名; #初始化某一张表 TRUNCATE TABLE 表名; #修改表中的数据 UPDATE 表名 SET newid=NULL,age=00 WHERE newid=1; //*****排序查询****#表中数据降序排序desc （并查询） SELECT*FROM 表名 ORDER BY 键 DESC; ORDER BY 键 DESC; #表中数据升序排序asc （并查询 ） SELECTFROM 表名 ORDER BY 键 ASC; ORDER BY 键 ASC; SELECTFROM 表名 ORDER BY 键; ORDER BY 键; //*****聚合函数****#count的使用 SELECT COUNT(键) FROM newstu; #包括null的count使用 SELECT COUNT(IFNULL(键,0)) FROM 表名; SELECT COUNT(*) FROM 表名; #max的使用 SELECT MAX(键) FROM 表名 ; #min的使用 SELECT MIN(键) FROM 表名; #sum的使用 SELECT SUM(键) FROM 表名; #avg的使用 SELECT AVG(键) FROM 表名; //**分组查询的使用***** SELECT 所查询的内容 FROM newstu GROUP BY 分组的依据（列名）; SELECT COUNT(newid),AVG(score) FROM newstu GROUP BY NAME; SELECT COUNT(IFNULL(newid,0)),AVG(score) FROM newstu GROUP BY NAME;#分组之前对其进行条件限制 where 在分组之前 不能进行聚合函数的判断 SELECT COUNT(newid),AVG(score) FROM newstu WHERE newid &gt; 3 GROUP BY NAME; #分组之后对其进行条件限制 having 在分组之后 可以进行聚合函数的判断 SELECT COUNT(newid),AVG(score) FROM newstu GROUP BY NAME HAVING COUNT(newid) &gt;0; //**分页查询的使用** SELECT FROM newstu LIMIT 开始的索引,每页的条数; SELECT *FROM newstu LIMIT 0,2; SELECT *FROM newstu LIMIT 2,2; SELECT *FROM newstu LIMIT 4,2; SELECT *FROM newstu LIMIT 6,2;#公式 开始的索引 = （当前的页码-1）每页的条数#分页操作是一个方言 和 其他的数据库的实现是不一样的 //*****基础查询操作*****#格式 SELECT 字段1， 字段2 FROM 表名 [WHERE 条件1] ， [WHERE 条件2] [GROUP BY 条件3] [ORDER BY 排序方式 HAVING LIMIT 开始的索引，每页查询的条数] //去除重复的结果集 distinct 结果完全一样才可以去除 SELECT DISTINCT 字段1 FROM 表名; SELECT DISTINCT NAME FROM newstu; #计算列的值的计算 null+数字 = null; null计算的结果都是null SELECT NAME,score,newid,score+newid FROM newstu; #值为null问题的解决 SELECT NAME,score,newid,IFNULL(score,0)+IFNULL(newid,0) FROM newstu; #计算值起别名 as 可以省略 SELECT NAME,score,newid,IFNULL(score,0)+IFNULL(newid,0) AS 总分 FROM newstu; SELECT NAME,score,newid,IFNULL(score,0)+IFNULL(newid,0) 总分 FROM newstu; #查询整张表SELECT* FROM 表名; // ****条件查询** where条件查询/* 运算符 &gt; &gt;= &lt; &lt;= = &lt;&gt;相当于!= BETWEEN AND 或 &amp;&amp; age&gt;=0 AND age&lt;20 BETWEEN 20 AND 30;包含等 IN IN(数据1，数据2，数据3) 在之类的 LIKE 模糊查询 IS NULL null值不能用等号来比较 is null才可以 IS NOT NULL null值不能用等号来比较 is NOT null才可以 AND &amp;&amp; OR || NOT ! */LIKE的使用 /* 占位符 _：单个任意字符 %：任意多个字符 */ -- 性马的 SELECT *FROM newstu WHERE NAME LIKE &quot;马%&quot;; -- 两个字性马的 SELECT *FROM newstu WHERE NAME LIKE &quot;马_&quot;; -- 一个字的 SELECT *FROM newstu WHERE NAME LIKE &quot;_&quot;;#查询姓名中包含某个字段 SELECT *FROM newstu WHERE NAME LIKE “%a%”; #约束##主键约束###在创建时添加主键约束primary key 非空且唯一 唯一标识 例如id card CREATE TABLE perpro1( id INT PRIMARY KEY, phone_count VARCHAR(20) – 姓名非空 );#唯一约束对null不做限定###删除主键 不用指定 主键唯一 ALTER TABLE perpro1 DROP PRIMARY KEY; ###在创建完成后添加主键 ALTER TABLE perpro1 MODIFY id INT PRIMARY KEY; ###主键自动增长 主键在表内自动增长 CREATE TABLE perpro2( id INT PRIMARY KEY AUTO_INCREMENT, phone_count VARCHAR(20) – 姓名非空 );#唯一约束对null不做限定 INSERT INTO perpro2 VALUE(NULL,”11”); #null即自动增长 INSERT INTO perpro2 VALUE(7,”11”); INSERT INTO perpro2 VALUE(5,”11”); SELECT *FROM perpro2; ###删除自动增长 ALTER TABLE perpro2 MODIFY id INT ;###添加自动增长 ALTER TABLE perpro2 MODIFY id INT AUTO_INCREMENT ; ##非空约束###创建时候非空约束not null CREATE TABLE student( age INT, NAME VARCHAR(20) NOT NULL – 姓名非空 );###删除非空约束 ALTER TABLE student MODIFY NAME VARCHAR(20);###创建后添加非空约束 ALTER TABLE student MODIFY NAME VARCHAR(10) NO NULL; ##唯一约束###创建表时添加唯一约束unique CREATE TABLE perpro( id INT, phone_count VARCHAR(20) UNIQUE – 姓名非空 );#唯一约束对null不做限定 ###删除唯一约束 每个唯一约束其实就是一个索引 ALTER TABLE perpro DROP INDEX phone_count; ###添加唯一约束，要保证原来没有重复的内容 ALTER TABLE perpro MODIFY phone_count VARCHAR(20) UNIQUE;","categories":[],"tags":[]}],"categories":[],"tags":[]}